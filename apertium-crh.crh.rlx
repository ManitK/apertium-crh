# Firstly, we need to define what tags should be considered sentence delimiters. For this example, only full stop is set as delimiter.
DELIMITERS = "<.>" ;

SUBREADINGS = LTR ;

LIST EOS = <<< sent ; 
LIST BOS = >>> sent ; 

# We can define sets for common tag clusters
LIST Cop = cop;
LIST Post = post;
LIST Px3sp = px3sp;
LIST Px1sg = px1sg;
LIST NOMEN = n np;
LIST N = n;
LIST Cog = cog ; 
LIST Ant = ant ; 
LIST Abl = abl;
LIST Sim = sim ; 
LIST Qst = qst ;
LIST Nom = nom;
LIST Aux = vaux ;
LIST V = v cop ;
LIST Num = num;
LIST Prop = np ;
LIST Son = "soñ" ;
LIST Sene = "sene";
LIST Ref = ref ;
LIST Loc = loc ;
LIST Adv = adv;
LIST Det = det ;
LIST Prc/perf = prc_perf ;
LIST Prc/impf = prc_impf ;
LIST Gna/perf = gna_perf;
LIST Vaux = vaux ;
LIST Imper = imp ; 

LIST Pass = pass ; 
LIST Coop = coop ;
LIST Caus = caus ;

LIST Attr = attr ;
LIST Subst = subst ; 

LIST Sg1 = (p1 sg);
LIST Sg2 = (p2 sg) ;
LIST Sg3 = (p3 sg) ;
LIST Pl1 = (p1 pl);
LIST Pl2 = (p2 pl) ;
LIST Pl3 = (p3 pl) ;

LIST Li = ".*l[ıüiu]"ri ; 
LIST Sız = ".*s[ıüiu]z"ri ; 

LIST Post/Li = ("lı" post) ;
LIST Post/Sız = ("sız" post) ;

LIST Meslek = ".*[çc][ıüiu]"r "alim" ; 

LIST Title = "<[A-Z].*>"r ;

LIST Terek = "Terek" ;

LIST Dep = "<dep>"i ;

LIST Err/Orth = err_orth ;

SET Pers = Sg1 | Sg2 | Sg3 | Pl1 | Pl2 | Pl3 ;

SET Prc = Prc/perf | Prc/impf ; 

SET Ant/Cog = Ant | Cog ; 


SECTION

REMOVE SUB:1 Err/Orth ;

REMOVE Err/Orth ;

SECTION

# Remove zero copula if it is third person singular [MT]
REMOVE SUB:1 Cop IF (0/* Sg3) (NOT 1 EOS) ; 

REMOVE SUB:1 Cop IF (0 Nom)(1 Px3sp);

REMOVE Px1sg IF (1 Px3sp);

SELECT Cop IF (NOT 0* V);

SELECT Post IF (0 Post OR N) (-1 Abl);

SELECT Prop IF (0 Terek) (0 Title);

SELECT Adv IF (0 Son) (1 Num) (2 Sene + Loc);

REMOVE Adv IF (0 Det) (NOT 1* V);

SELECT Gna/perf IF (0 Dep) (NOT 1 Aux) ;

REMOVE Prc/perf IF (0 Gna/perf) (NOT 1* Vaux) ;

REMOVE Imper IF (1C Cop) ;

REMOVE Pers IF (1C Pers) ;

REMOVE Vaux (NOT -1 Prc) ;

REMOVE SUB:1 Post/Li (0/* Li) ;

REMOVE SUB:1 Post/Sız (0/* Sız) ;

SELECT Attr (0 Meslek) (1 Ant/Cog) ; 

REMOVE Pass IF (0 Pass) (0 V - Pass) (0C V) ;

SELECT Det IF (0 Ref) (1 N) ;

REMOVE SUB:1 Qst IF (0 Px3sp) ;

REMOVE Sim IF (0C N) ; 

# Resources:
# http://visl.sdu.dk/cg3.html
# http://groups.google.com/group/constraint-grammar
# http://kevindonnelly.org.uk/2010/05/constraint-grammar-tutorial/
# http://wiki.apertium.org/wiki/Constraint_Grammar
# http://wiki.apertium.org/wiki/Apertium_and_Constraint_Grammar

